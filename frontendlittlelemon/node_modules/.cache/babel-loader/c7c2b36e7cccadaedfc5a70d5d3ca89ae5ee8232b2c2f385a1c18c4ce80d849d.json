{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bobby\\\\Desktop\\\\projects\\\\Coursera\\\\fullstack\\\\fullstackprojectLittlelemon\\\\frontendlittlelemon\\\\src\\\\Sectionfiles\\\\EllipsisTextContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport \"../Css/Main.css\"; // Import your stylesheet with the provided CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EllipsisTextContainer = _ref => {\n  _s();\n  let {\n    text,\n    maxWidth,\n    maxHeight\n  } = _ref;\n  const [isOverflowed, setIsOverflowed] = useState(false);\n  const textContainerRef = useRef(null);\n  useEffect(() => {\n    const textContainer = textContainerRef.current;\n    if (textContainer.scrollHeight > textContainer.clientHeight) {\n      setIsOverflowed(true);\n    } else {\n      setIsOverflowed(false);\n    }\n  }, [text]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `text-container ${isOverflowed ? 'overflowed' : ''}`,\n    ref: textContainerRef,\n    style: {\n      maxWidth,\n      maxHeight,\n      overflow: 'hidden'\n    },\n    children: textContainer.scrollHeight\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(EllipsisTextContainer, \"FqrJ5NvHKe3cWEaCLAc0DV5l+nQ=\");\n_c = EllipsisTextContainer;\nexport default EllipsisTextContainer;\nvar _c;\n$RefreshReg$(_c, \"EllipsisTextContainer\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","EllipsisTextContainer","_ref","_s","text","maxWidth","maxHeight","isOverflowed","setIsOverflowed","textContainerRef","textContainer","current","scrollHeight","clientHeight","className","ref","style","overflow","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/bobby/Desktop/projects/Coursera/fullstack/fullstackprojectLittlelemon/frontendlittlelemon/src/Sectionfiles/EllipsisTextContainer.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport \"../Css/Main.css\" // Import your stylesheet with the provided CSS\r\n\r\nconst EllipsisTextContainer = ({ text, maxWidth, maxHeight }) => {\r\n  const [isOverflowed, setIsOverflowed] = useState(false);\r\n  const textContainerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const textContainer = textContainerRef.current;\r\n\r\n    if (textContainer.scrollHeight > textContainer.clientHeight) {\r\n      setIsOverflowed(true);\r\n    } else {\r\n      setIsOverflowed(false);\r\n    }\r\n  }, [text]);\r\n\r\n  return (\r\n    <div\r\n      className={`text-container ${isOverflowed ? 'overflowed' : ''}`}\r\n      ref={textContainerRef}\r\n      style={{ maxWidth, maxHeight, overflow: 'hidden' }}\r\n    >\r\n      {textContainer.scrollHeight}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EllipsisTextContainer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,iBAAiB,EAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,qBAAqB,GAAGC,IAAA,IAAmC;EAAAC,EAAA;EAAA,IAAlC;IAAEC,IAAI;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAAJ,IAAA;EAC1D,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMa,gBAAgB,GAAGX,MAAM,CAAC,IAAI,CAAC;EAErCD,SAAS,CAAC,MAAM;IACd,MAAMa,aAAa,GAAGD,gBAAgB,CAACE,OAAO;IAE9C,IAAID,aAAa,CAACE,YAAY,GAAGF,aAAa,CAACG,YAAY,EAAE;MAC3DL,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,MAAM;MACLA,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;EAEV,oBACEJ,OAAA;IACEc,SAAS,EAAG,kBAAiBP,YAAY,GAAG,YAAY,GAAG,EAAG,EAAE;IAChEQ,GAAG,EAAEN,gBAAiB;IACtBO,KAAK,EAAE;MAAEX,QAAQ;MAAEC,SAAS;MAAEW,QAAQ,EAAE;IAAS,CAAE;IAAAC,QAAA,EAElDR,aAAa,CAACE;EAAY;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEV,CAAC;AAACnB,EAAA,CAvBIF,qBAAqB;AAAAsB,EAAA,GAArBtB,qBAAqB;AAyB3B,eAAeA,qBAAqB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}