{"ast":null,"code":"import { HttpResponse } from \"@smithy/protocol-http\";\nimport { buildQueryString } from \"@smithy/querystring-builder\";\nimport { requestTimeout } from \"./request-timeout\";\nexport const keepAliveSupport = {\n  supported: Boolean(typeof Request !== \"undefined\" && \"keepalive\" in new Request(\"https://[::1]\"))\n};\nexport class FetchHttpHandler {\n  constructor(options) {\n    if (typeof options === \"function\") {\n      this.configProvider = options().then(opts => opts || {});\n    } else {\n      this.config = options ?? {};\n      this.configProvider = Promise.resolve(this.config);\n    }\n  }\n  destroy() {}\n  async handle(request) {\n    let {\n      abortSignal\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!this.config) {\n      this.config = await this.configProvider;\n    }\n    const requestTimeoutInMs = this.config.requestTimeout;\n    const keepAlive = this.config.keepAlive === true;\n    if (abortSignal?.aborted) {\n      const abortError = new Error(\"Request aborted\");\n      abortError.name = \"AbortError\";\n      return Promise.reject(abortError);\n    }\n    let path = request.path;\n    const queryString = buildQueryString(request.query || {});\n    if (queryString) {\n      path += `?${queryString}`;\n    }\n    if (request.fragment) {\n      path += `#${request.fragment}`;\n    }\n    let auth = \"\";\n    if (request.username != null || request.password != null) {\n      const username = request.username ?? \"\";\n      const password = request.password ?? \"\";\n      auth = `${username}:${password}@`;\n    }\n    const {\n      port,\n      method\n    } = request;\n    const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n    const body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n    const requestOptions = {\n      body,\n      headers: new Headers(request.headers),\n      method: method\n    };\n    if (typeof AbortController !== \"undefined\") {\n      requestOptions[\"signal\"] = abortSignal;\n    }\n    if (keepAliveSupport.supported) {\n      requestOptions[\"keepalive\"] = keepAlive;\n    }\n    const fetchRequest = new Request(url, requestOptions);\n    const raceOfPromises = [fetch(fetchRequest).then(response => {\n      const fetchHeaders = response.headers;\n      const transformedHeaders = {};\n      for (const pair of fetchHeaders.entries()) {\n        transformedHeaders[pair[0]] = pair[1];\n      }\n      const hasReadableStream = response.body != undefined;\n      if (!hasReadableStream) {\n        return response.blob().then(body => ({\n          response: new HttpResponse({\n            headers: transformedHeaders,\n            reason: response.statusText,\n            statusCode: response.status,\n            body\n          })\n        }));\n      }\n      return {\n        response: new HttpResponse({\n          headers: transformedHeaders,\n          reason: response.statusText,\n          statusCode: response.status,\n          body: response.body\n        })\n      };\n    }), requestTimeout(requestTimeoutInMs)];\n    if (abortSignal) {\n      raceOfPromises.push(new Promise((resolve, reject) => {\n        abortSignal.onabort = () => {\n          const abortError = new Error(\"Request aborted\");\n          abortError.name = \"AbortError\";\n          reject(abortError);\n        };\n      }));\n    }\n    return Promise.race(raceOfPromises);\n  }\n  updateHttpClientConfig(key, value) {\n    this.config = undefined;\n    this.configProvider = this.configProvider.then(config => {\n      config[key] = value;\n      return config;\n    });\n  }\n  httpHandlerConfigs() {\n    return this.config ?? {};\n  }\n}","map":{"version":3,"names":["HttpResponse","buildQueryString","requestTimeout","keepAliveSupport","supported","Boolean","Request","FetchHttpHandler","constructor","options","configProvider","then","opts","config","Promise","resolve","destroy","handle","request","abortSignal","arguments","length","undefined","requestTimeoutInMs","keepAlive","aborted","abortError","Error","name","reject","path","queryString","query","fragment","auth","username","password","port","method","url","protocol","hostname","body","requestOptions","headers","Headers","AbortController","fetchRequest","raceOfPromises","fetch","response","fetchHeaders","transformedHeaders","pair","entries","hasReadableStream","blob","reason","statusText","statusCode","status","push","onabort","race","updateHttpClientConfig","key","value","httpHandlerConfigs"],"sources":["C:/Users/bobby/Desktop/projects/Coursera/fullstack/fullstackprojectLittlelemon/frontendlittlelemon/node_modules/@smithy/fetch-http-handler/dist-es/fetch-http-handler.js"],"sourcesContent":["import { HttpResponse } from \"@smithy/protocol-http\";\nimport { buildQueryString } from \"@smithy/querystring-builder\";\nimport { requestTimeout } from \"./request-timeout\";\nexport const keepAliveSupport = {\n    supported: Boolean(typeof Request !== \"undefined\" && \"keepalive\" in new Request(\"https://[::1]\")),\n};\nexport class FetchHttpHandler {\n    constructor(options) {\n        if (typeof options === \"function\") {\n            this.configProvider = options().then((opts) => opts || {});\n        }\n        else {\n            this.config = options ?? {};\n            this.configProvider = Promise.resolve(this.config);\n        }\n    }\n    destroy() {\n    }\n    async handle(request, { abortSignal } = {}) {\n        if (!this.config) {\n            this.config = await this.configProvider;\n        }\n        const requestTimeoutInMs = this.config.requestTimeout;\n        const keepAlive = this.config.keepAlive === true;\n        if (abortSignal?.aborted) {\n            const abortError = new Error(\"Request aborted\");\n            abortError.name = \"AbortError\";\n            return Promise.reject(abortError);\n        }\n        let path = request.path;\n        const queryString = buildQueryString(request.query || {});\n        if (queryString) {\n            path += `?${queryString}`;\n        }\n        if (request.fragment) {\n            path += `#${request.fragment}`;\n        }\n        let auth = \"\";\n        if (request.username != null || request.password != null) {\n            const username = request.username ?? \"\";\n            const password = request.password ?? \"\";\n            auth = `${username}:${password}@`;\n        }\n        const { port, method } = request;\n        const url = `${request.protocol}//${auth}${request.hostname}${port ? `:${port}` : \"\"}${path}`;\n        const body = method === \"GET\" || method === \"HEAD\" ? undefined : request.body;\n        const requestOptions = { body, headers: new Headers(request.headers), method: method };\n        if (typeof AbortController !== \"undefined\") {\n            requestOptions[\"signal\"] = abortSignal;\n        }\n        if (keepAliveSupport.supported) {\n            requestOptions[\"keepalive\"] = keepAlive;\n        }\n        const fetchRequest = new Request(url, requestOptions);\n        const raceOfPromises = [\n            fetch(fetchRequest).then((response) => {\n                const fetchHeaders = response.headers;\n                const transformedHeaders = {};\n                for (const pair of fetchHeaders.entries()) {\n                    transformedHeaders[pair[0]] = pair[1];\n                }\n                const hasReadableStream = response.body != undefined;\n                if (!hasReadableStream) {\n                    return response.blob().then((body) => ({\n                        response: new HttpResponse({\n                            headers: transformedHeaders,\n                            reason: response.statusText,\n                            statusCode: response.status,\n                            body,\n                        }),\n                    }));\n                }\n                return {\n                    response: new HttpResponse({\n                        headers: transformedHeaders,\n                        reason: response.statusText,\n                        statusCode: response.status,\n                        body: response.body,\n                    }),\n                };\n            }),\n            requestTimeout(requestTimeoutInMs),\n        ];\n        if (abortSignal) {\n            raceOfPromises.push(new Promise((resolve, reject) => {\n                abortSignal.onabort = () => {\n                    const abortError = new Error(\"Request aborted\");\n                    abortError.name = \"AbortError\";\n                    reject(abortError);\n                };\n            }));\n        }\n        return Promise.race(raceOfPromises);\n    }\n    updateHttpClientConfig(key, value) {\n        this.config = undefined;\n        this.configProvider = this.configProvider.then((config) => {\n            config[key] = value;\n            return config;\n        });\n    }\n    httpHandlerConfigs() {\n        return this.config ?? {};\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}